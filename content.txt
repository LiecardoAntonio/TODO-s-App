FCC Local Storage -Building TODO App

CONTENT:
1. Modal in Web Development
  > A modal is an element that prevents all interaction with elements outside it until the modal has been dismissed.
  > A modal is a dialog box or popup that appears on top of the main content, often used to gather user input or display important information without navigating away from the current page.
  > Basically something that happens when something is being interacted by the user, ex: there is a hidden element in HTML, but after u click a certain button the element display shows into the HTML

2. element.classList.toggle("class");
  > The toggle method will add the class if it is not present on the element, and remove the class if it is present on the element.
  > ex:
  element.classList.toggle("class-to-toggle");

3. HTML dialog element 
  > The HTML <dialog> element is a native HTML element used to create dialog boxes, modals, or popups on a webpage. It provides a built-in way to create dialog windows that can be shown or hidden using simple JavaScript, without needing extra CSS or JavaScript libraries. The <dialog> element is part of the HTML5 specification and has built-in support for handling modal and non-modal dialogs.
  > The HTML dialog element has a showModal() method that can be used to display a modal dialog box on a web page.
  > Basically this help u making a hidden element without needing to use style display none and style display block to show it & many other uses.
  > ex:
  dialogElement.showModal();

4. e.preventDefault();
  > prevent the default behavior of an element when a particular event is triggered.
  > ex: a 'submit' event has a default behavior which is refreshing the page when the event is triggered.
  ex code: 
  taskForm.addEventListener('submit', (e) => {
    e.preventDefault();
  })
  > learn more about default behavior of an event: https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault

5. arr.findIndex((param) => condition)
  > The findIndex() array method finds and returns the index of the first element in an array that meets the criteria specified by a provided testing function. If no such element is found, the method returns -1.
  > ex:
  const numbers = [3, 1, 5, 6];
  const firstNumLargerThanThree = numbers.findIndex((num) => num > 3);

  console.log(firstNumLargerThanThree); // prints index 2

6. string.toLowerCase();
  > turn all string to lowercase
  > ex:
  "HELLO".toLowerCase(); //hello

7. (KNOWLEDGE) Hyphenated string  
  > A hyphenated string is a sequence of words or characters that are connected by hyphens (-). It often combines multiple words or elements into a single, continuous string.
  > ex use case:
  1. Connect compound words: For example, "well-known" or "part-time."
  2. Represent phrases or terms in URLs or filenames: For example, "data-science" or "customer-support."
  3. Join identifiers or code terms: For example, "user-name" or "order-id" in programming contexts.

8. Date.now()
  > Date.now() returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.
  > ex:
  console.log(Date.now()); // 1628586800000

9. (RECALL) onclick attribute on HTML element
  > add a functionalities when the onclick event happens on that particular element.
  > ex:
  <button type="button" class="btn" onclick="editTask(this)">Edit</button> 

10. 'this' keywords
  > 'this' is a keyword that refers to the current context.
  > ex use case:
  <button type="button" class="btn" onclick="editTask(this)">Edit</button> //this will tell which button were to be passed into the function

11. element.parentElement
  > element.parentElement refers to the parentElement of that element.
  > ex use case:
  //HTML:
  <div class="task" id="${id}">
          <p><strong>Title:</strong> ${title}</p>
          <p><strong>Date:</strong> ${date}</p>
          <p><strong>Description:</strong> ${description}</p>
          <button type="button" class="btn" onclick="editTask(this)">Edit</button> 
          <button type="button" class="btn" onclick="deleteTask(this)">Delete</button> 
  </div>
  //JS:
  const deleteTask = (buttonEl) => {
    const dataArrIndex = taskData.findIndex((item) => item.id === buttonEl.parentElement.id)
  }

12. element.remove();
  > remove the entire element from the DOM

13. arr.splice(param1, param2, param3);
  > splice() is an array method that modifies arrays by removing, replacing, or adding elements at a specified index, while also returning the removed elements. It can take up to three arguments: the first one is the mandatory index at which to start, the second is the number of items to remove, and the third is an optional replacement element.
  > ex:
  const fruits = ["mango", "date", "cherry", "banana", "apple"];

  // Remove date and cherry from the array starting at index 1
  const removedFruits = fruits.splice(1, 2);

  console.log(fruits); // [ 'mango', 'banana', 'apple' ]
  console.log(removedFruits); // [ 'date', 'cherry' ]

14. localStorage
  > localStorage offers methods for saving, retrieving, and deleting items. The items you save can be of any JavaScript data type.
  > For instance, the setItem() method is used to save an item, and the getItem() method retrieves the item. To delete a specific item, you can utilize the removeItem() method, or if you want to delete all items in the storage, you can use clear().
  > ex:
  localStorage.setItem("key", value); // value could be string, number, or any other data type
  > ex:
  const myTaskArr = [
    { task: "Walk the Dog", date: "22-04-2022" },
    { task: "Read some books", date: "02-11-2023" },
    { task: "Watch football", date: "10-08-2021" },
  ];
  localStorage.setItem('data', myTaskArr);
  //After that, open your browser console and go to the Applications tab, select Local Storage, check the key and value inside it and you will find it as a datatype, in this case Object
  > If you check the "Application" tab of your browser console, you'll notice a series of [object Object]. This is because everything you save in localStorage needs to be in string format.

15. JSON.stringify(variable)
  > convert any variable we want to store into string, so we can save it to the localStorage
  > ex:
  localStorage.setItem("data", JSON.stringify(myTaskArr));

16. JSON.parse(localStorage.getItem('data'));
  > parse the string we obtain from the localStorage back into its original data type
  > ex:
  const getTaskArrObj = JSON.parse(localStorage.getItem('data'));

17. 